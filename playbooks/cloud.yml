---
- name: cloud base setup
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - name: upload ssh key to cloudstack
    cloudstack_sshkey:
      name: defaultkey
      public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

  - name: ensure security groups exist
    cloudstack_sg:
      name: '{{ item }}'
    with_items:
    - default
    - search

  - name: add inbound SSH to security group default
    cloudstack_sg_rule:
      name: default
      start_port: '{{ item }}'
      end_port: '{{ item }}'
    with_items:
    - 22

  - name: add inbound tcp rules to security group search
    cloudstack_sg_rule:
      name: search
      start_port: '{{ item }}'
      end_port: '{{ item }}'
    with_items:
    - 80
    - 8090


- name: install VMs in the cloud
  hosts: search
  connection: local
  gather_facts: no
  tasks:
  - name: create VMs on cloudstack
    cloudstack_vm:
      name: '{{ inventory_hostname_short }}'
      group: search
      template: Linux Debian 7 64-bit 10GB Disk
      service_offering: Tiny
      security_groups:
      - default
      - search
      ssh_key: defaultkey
    register: vm

  - name: print VM infos
    debug: msg='VM {{ inventory_hostname }} {{ vm.default_ip }}'

  - name: assing IP to the inventory
    set_fact: ansible_ssh_host={{ vm.default_ip }}

  - name: waiting for SSH to come up
    wait_for: port=22 host={{ vm.default_ip }} delay=5


- name: install search engine
  remote_user: root
  hosts: search
  pre_tasks:
  - name: update system (may take a while)
    apt: update_cache=yes

  tasks:
  - name: add yacy gpg key
    apt_key: url='http://debian.yacy.net/yacy_orbiter_key.asc'

  - name: add yacy repo
    apt_repository: repo='deb http://debian.yacy.net /'

  - name: install packages
    apt: pkg={{ item }}
    with_items:
    - openjdk-7-jre-headless
    - yacy
    - nginx

  - name: configre nginx for yacy
    template: src=files/nginx/default.j2 dest=/etc/nginx/sites-available/default
    notify: restart nginx

  - name: ensure services are running
    service: name={{ item }} state=started enabled=yes
    with_items:
    - nginx
    - yacy

  - name: wait for yacy to be up
    wait_for: port=8090 delay=10

  post_tasks:
  - name: finished
    debug: msg='Open your browser http://{{ vm.default_ip }}'

  handlers:
  - name: restart nginx
    service: name=nginx state=restarted
